import argparse
import json
import os
import subprocess
import sys


def main():
    parser = argparse.ArgumentParser(description="Esegui l'analisi di un SBOM usando Grype.")
    parser.add_argument('sbom', metavar='SBOM', type=str, help="Percorso al file SBOM da analizzare")
    args = parser.parse_args()

    print("Inizio analisi SBOM...")
    print(args.sbom)
    analyze_sbom(args.sbom)
    print("Analisi completata.")


def analyze_sbom(sbom_path):
    """
    Esegui Grype per analizzare l'SBOM specificato e salva i risultati in un file JSON.

    :param sbom_path: Percorso al file SBOM da analizzare.
    """
    # Estrarre il nome del file SBOM senza estensione e path
    sbom_name = os.path.basename(sbom_path)
    vuln_name = sbom_name.replace("SBOM", "Vuln").rsplit('.', 1)[0] + ".json"


    # Creare la directory 'Vulnerabilities' se non esiste
    output_dir = "Vulnerabilities"
    os.makedirs(output_dir, exist_ok=True)

    # Percorso completo per il file di output
    output_path = os.path.join(output_dir, vuln_name)
    sbom_path_abs = os.path.abspath(sbom_path)
    original_cwd = os.getcwd()  # Salva la directory corrente
    try:
        # Esegui Grype con output in formato JSON
        os.chdir(r"C:\Users\grego\Documents\grype_folder")
        result = subprocess.run(
            ['grype',sbom_path_abs , '-o', 'json'],
            capture_output=True, text=True, check=True
        )

        # Cattura l'output JSON
        grype_output = result.stdout

        # Analizza l'output JSON
        vulnerabilities = json.loads(grype_output)

        # Struttura l'output per includere il nome della componente
        formatted_vulnerabilities = {}
        for match in vulnerabilities.get("matches", []):
            artifact = match["artifact"]
            name = artifact["name"]
            version = artifact["version"]
            component = f"{name}:{version}"

            if component not in formatted_vulnerabilities:
                formatted_vulnerabilities[component] = {
                    "name": name,
                    "version": version,
                    "type": artifact.get("type"),
                    "licenses": artifact.get("licenses"),
                    "vulnerabilities": []
                }

            vulnerability = match["vulnerability"]
            formatted_vulnerabilities[component]["vulnerabilities"].append({
                "id": vulnerability["id"],
                "severity": vulnerability["severity"],
                "description": vulnerability.get("description", "No description provided"),
                "links": vulnerability.get("links", []),
            })




        os.chdir(original_cwd)
        formatted_output = json.dumps(formatted_vulnerabilities, indent=4)
        # Scrivi l'output JSON in un file
        with open(output_path, 'w') as f:
            f.write(formatted_output)

        print(f"Risultati salvati in: {output_path}")
    except subprocess.CalledProcessError as e:
        print(f"Errore durante l'esecuzione di Grype: {e.stderr}", file=sys.stderr)


if __name__ == "__main__":
    files = os.listdir("SBOM_Source_Analisys")
    for f in files:

        sys.argv = ['sbom',f'SBOM_Source_Analisys/{f}']
        main()
